{"ast":null,"code":"var _jsxFileName = \"/Users/nickdellorco/Desktop/DiaDagons/src/util/interact.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n// import { pinJSONToIPFS } from \"./pinata.js\";\nrequire(\"dotenv\").config();\n\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\n\nconst contractABI = require(\"../artifacts/contracts/DiaDragons.sol/DiaDragons.json\");\n\nconst contractAddress = \"0xd832B8eED0E5B8f124eCa1Cc2dFe2e5dCf60746d\";\n\nconst {\n  createAlchemyWeb3\n} = require(\"@alch/alchemy-web3\");\n\nconst web3 = createAlchemyWeb3(alchemyKey);\nexport const connectWallet = async () => {\n  try {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        const obj = {\n          status: \"👆🏽 Write a essage in the text-field above.\",\n          address: addressArray[0]\n        };\n        return obj;\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"😥 \" + err.message\n        };\n      }\n    } else {\n      return {\n        address: \"\",\n        status: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n              target: \"_blank\",\n              href: `https://metamask.io/download.html`,\n              children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 6\n        }, this)\n      };\n    }\n  } catch (error) {}\n};\nexport const getCurrentWalletConnected = async () => {\n  try {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_accounts\"\n        });\n\n        if (addressArray.length > 0) {\n          return {\n            address: addressArray[0],\n            status: \"👆🏽 Write a message in the text-field above.\"\n          };\n        } else {\n          return {\n            address: \"\",\n            status: \"🦊 Connect to Metamask using the top right button.\"\n          };\n        }\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"😥 \" + err.message\n        };\n      }\n    } else {\n      return {\n        address: \"\",\n        status: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n              target: \"_blank\",\n              href: `https://metamask.io/download.html`,\n              children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 6\n        }, this)\n      };\n    }\n  } catch (error) {}\n};\nexport const mintNFT = async () => {\n  // //make metadata\n  // const metadata = new Object();\n  // metadata.name = name;\n  // metadata.image = url;\n  // metadata.description = description;\n  // const pinataResponse = await pinJSONToIPFS(metadata);\n  // if (!pinataResponse.success) {\n  //   return {\n  //     success: false,\n  //     status: \"😢 Something went wrong while uploading your tokenURI.\",\n  //   };\n  // }\n  // const tokenURI = pinataResponse.pinataUrl;\n  window.contract = await new web3.eth.Contract(contractABI.abi, contractAddress);\n  const transactionParameters = {\n    to: contractAddress,\n    // Required except during contract publications.\n    from: window.ethereum.selectedAddress,\n    // must match user's active address.\n    value: \"100000000000000\",\n    data: window.contract.methods.mintDiaDragonTier1().encodeABI()\n  };\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters]\n    });\n    return {\n      success: true,\n      status: \"✅ Check out your transaction on Etherscan: https://rinkeby.etherscan.io/tx/\" + txHash\n    };\n  } catch (error) {\n    return {\n      success: false,\n      status: \"😥 Something went wrong: \" + error.message\n    };\n  }\n};","map":{"version":3,"sources":["/Users/nickdellorco/Desktop/DiaDagons/src/util/interact.js"],"names":["require","config","alchemyKey","process","env","REACT_APP_ALCHEMY_KEY","contractABI","contractAddress","createAlchemyWeb3","web3","connectWallet","window","ethereum","addressArray","request","method","obj","status","address","err","message","error","getCurrentWalletConnected","length","mintNFT","contract","eth","Contract","abi","transactionParameters","to","from","selectedAddress","value","data","methods","mintDiaDragonTier1","encodeABI","txHash","params","success"],"mappings":"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","sourcesContent":["// import { pinJSONToIPFS } from \"./pinata.js\";\nrequire(\"dotenv\").config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst contractABI = require(\"../artifacts/contracts/DiaDragons.sol/DiaDragons.json\");\nconst contractAddress = \"0xd832B8eED0E5B8f124eCa1Cc2dFe2e5dCf60746d\";\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\n\nexport const connectWallet = async () => {\n\ttry {\n\t\tif (window.ethereum) {\n\t\t\ttry {\n\t\t\t\tconst addressArray = await window.ethereum.request({\n\t\t\t\t\tmethod: \"eth_requestAccounts\",\n\t\t\t\t});\n\t\t\t\tconst obj = {\n\t\t\t\t\tstatus: \"👆🏽 Write a essage in the text-field above.\",\n\t\t\t\t\taddress: addressArray[0],\n\t\t\t\t};\n\t\t\t\treturn obj;\n\t\t\t} catch (err) {\n\t\t\t\treturn {\n\t\t\t\t\taddress: \"\",\n\t\t\t\t\tstatus: \"😥 \" + err.message,\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\taddress: \"\",\n\t\t\t\tstatus: (\n\t\t\t\t\t<span>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t{\" \"}\n\t\t\t\t\t\t\t🦊{\" \"}\n\t\t\t\t\t\t\t<a target='_blank' href={`https://metamask.io/download.html`}>\n\t\t\t\t\t\t\t\tYou must install Metamask, a virtual Ethereum wallet, in your\n\t\t\t\t\t\t\t\tbrowser.\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</span>\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\t} catch (error) {}\n};\n\nexport const getCurrentWalletConnected = async () => {\n\ttry {\n\t\tif (window.ethereum) {\n\t\t\ttry {\n\t\t\t\tconst addressArray = await window.ethereum.request({\n\t\t\t\t\tmethod: \"eth_accounts\",\n\t\t\t\t});\n\t\t\t\tif (addressArray.length > 0) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\taddress: addressArray[0],\n\t\t\t\t\t\tstatus: \"👆🏽 Write a message in the text-field above.\",\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\treturn {\n\t\t\t\t\t\taddress: \"\",\n\t\t\t\t\t\tstatus: \"🦊 Connect to Metamask using the top right button.\",\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\treturn {\n\t\t\t\t\taddress: \"\",\n\t\t\t\t\tstatus: \"😥 \" + err.message,\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\taddress: \"\",\n\t\t\t\tstatus: (\n\t\t\t\t\t<span>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t{\" \"}\n\t\t\t\t\t\t\t🦊{\" \"}\n\t\t\t\t\t\t\t<a target='_blank' href={`https://metamask.io/download.html`}>\n\t\t\t\t\t\t\t\tYou must install Metamask, a virtual Ethereum wallet, in your\n\t\t\t\t\t\t\t\tbrowser.\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</span>\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\t} catch (error) {}\n};\n\nexport const mintNFT = async () => {\n\t// //make metadata\n\t// const metadata = new Object();\n\t// metadata.name = name;\n\t// metadata.image = url;\n\t// metadata.description = description;\n\n\t// const pinataResponse = await pinJSONToIPFS(metadata);\n\t// if (!pinataResponse.success) {\n\t//   return {\n\t//     success: false,\n\t//     status: \"😢 Something went wrong while uploading your tokenURI.\",\n\t//   };\n\t// }\n\t// const tokenURI = pinataResponse.pinataUrl;\n\n\twindow.contract = await new web3.eth.Contract(\n\t\tcontractABI.abi,\n\t\tcontractAddress\n\t);\n\n\tconst transactionParameters = {\n\t\tto: contractAddress, // Required except during contract publications.\n\t\tfrom: window.ethereum.selectedAddress, // must match user's active address.\n\t\tvalue: \"100000000000000\",\n\t\tdata: window.contract.methods.mintDiaDragonTier1().encodeABI(),\n\t};\n\n\ttry {\n\t\tconst txHash = await window.ethereum.request({\n\t\t\tmethod: \"eth_sendTransaction\",\n\t\t\tparams: [transactionParameters],\n\t\t});\n\t\treturn {\n\t\t\tsuccess: true,\n\t\t\tstatus:\n\t\t\t\t\"✅ Check out your transaction on Etherscan: https://rinkeby.etherscan.io/tx/\" +\n\t\t\t\ttxHash,\n\t\t};\n\t} catch (error) {\n\t\treturn {\n\t\t\tsuccess: false,\n\t\t\tstatus: \"😥 Something went wrong: \" + error.message,\n\t\t};\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}