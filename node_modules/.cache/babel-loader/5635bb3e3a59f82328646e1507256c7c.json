{"ast":null,"code":"import { createElement, Component, useRef, useState, useCallback, useEffect } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar ObserverMap = new Map();\nvar RootIds = new WeakMap();\nvar rootId = 0;\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */\n\nfunction getRootId(root) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */\n\n\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(function (key) {\n    return options[key] !== undefined;\n  }).map(function (key) {\n    return key + \"_\" + (key === 'root' ? getRootId(options.root) : options[key]);\n  }).toString();\n}\n\nfunction createObserver(options) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  var id = optionsToId(options);\n  var instance = ObserverMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    var elements = new Map();\n    var thresholds;\n    var observer = new IntersectionObserver(function (entries) {\n      entries.forEach(function (entry) {\n        var _elements$get; // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n\n\n        var inView = entry.isIntersecting && thresholds.some(function (threshold) {\n          return entry.intersectionRatio >= threshold;\n        }); // @ts-ignore support IntersectionObserver v2\n\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(function (callback) {\n          callback(inView, entry);\n        });\n      });\n    }, options); // Ensure we have a valid thresholds array. If not, use the threshold from the options\n\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id: id,\n      observer: observer,\n      elements: elements\n    };\n    ObserverMap.set(id, instance);\n  }\n\n  return instance;\n}\n/**\r\n * @param element - DOM Element to observe\r\n * @param callback - Callback function to trigger when intersection status changes\r\n * @param options - Intersection Observer options\r\n * @return Function - Cleanup function that should be triggered to unregister the observer\r\n */\n\n\nfunction observe(element, callback, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (!element) return function () {}; // An observer with the same options can be reused, so lets use this fact\n\n  var _createObserver = createObserver(options),\n      id = _createObserver.id,\n      observer = _createObserver.observer,\n      elements = _createObserver.elements; // Register the callback listener for this element\n\n\n  var callbacks = elements.get(element) || [];\n\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements[\"delete\"](element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      ObserverMap[\"delete\"](id);\n    }\n  };\n}\n\nfunction isPlainChildren(props) {\n  return typeof props.children !== 'function';\n}\n/**\r\n ## Render props\r\n\n To use the `<InView>` component, you pass it a function. It will be called\r\n whenever the state changes, with the new value of `inView`. In addition to the\r\n `inView` prop, children also receive a `ref` that should be set on the\r\n containing DOM element. This is the element that the IntersectionObserver will\r\n monitor.\r\n\n If you need it, you can also access the\r\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\r\n on `entry`, giving you access to all the details about the current intersection\r\n state.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView>\r\n {({ inView, ref, entry }) => (\r\n      <div ref={ref}>\r\n        <h2>{`Header inside viewport ${inView}.`}</h2>\r\n      </div>\r\n    )}\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n\n ## Plain children\r\n\n You can pass any element to the `<InView />`, and it will handle creating the\r\n wrapping DOM element. Add a handler to the `onChange` method, and control the\r\n state in your own component. Any extra props you add to `<InView>` will be\r\n passed to the HTML element, allowing you set the `className`, `style`, etc.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\r\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n */\n\n\nvar InView = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(InView, _React$Component);\n\n  function InView(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.node = null;\n    _this._unobserveCb = null;\n\n    _this.handleNode = function (node) {\n      if (_this.node) {\n        // Clear the old observer, before we start observing a new element\n        _this.unobserve();\n\n        if (!node && !_this.props.triggerOnce && !_this.props.skip) {\n          // Reset the state if we get a new node, and we aren't ignoring updates\n          _this.setState({\n            inView: !!_this.props.initialInView,\n            entry: undefined\n          });\n        }\n      }\n\n      _this.node = node ? node : null;\n\n      _this.observeNode();\n    };\n\n    _this.handleChange = function (inView, entry) {\n      if (inView && _this.props.triggerOnce) {\n        // If `triggerOnce` is true, we should stop observing the element.\n        _this.unobserve();\n      }\n\n      if (!isPlainChildren(_this.props)) {\n        // Store the current State, so we can pass it to the children in the next render update\n        // There's no reason to update the state for plain children, since it's not used in the rendering.\n        _this.setState({\n          inView: inView,\n          entry: entry\n        });\n      }\n\n      if (_this.props.onChange) {\n        // If the user is actively listening for onChange, always trigger it\n        _this.props.onChange(inView, entry);\n      }\n    };\n\n    _this.state = {\n      inView: !!props.initialInView,\n      entry: undefined\n    };\n    return _this;\n  }\n\n  var _proto = InView.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n      this.unobserve();\n      this.observeNode();\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  };\n\n  _proto.observeNode = function observeNode() {\n    if (!this.node || this.props.skip) return;\n    var _this$props = this.props,\n        threshold = _this$props.threshold,\n        root = _this$props.root,\n        rootMargin = _this$props.rootMargin,\n        trackVisibility = _this$props.trackVisibility,\n        delay = _this$props.delay;\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold: threshold,\n      root: root,\n      rootMargin: rootMargin,\n      // @ts-ignore\n      trackVisibility: trackVisibility,\n      // @ts-ignore\n      delay: delay\n    });\n  };\n\n  _proto.unobserve = function unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n\n      this._unobserveCb = null;\n    }\n  };\n\n  _proto.render = function render() {\n    if (!isPlainChildren(this.props)) {\n      var _this$state = this.state,\n          inView = _this$state.inView,\n          entry = _this$state.entry;\n      return this.props.children({\n        inView: inView,\n        entry: entry,\n        ref: this.handleNode\n      });\n    }\n\n    var _this$props2 = this.props,\n        children = _this$props2.children,\n        as = _this$props2.as,\n        tag = _this$props2.tag,\n        props = _objectWithoutPropertiesLoose(_this$props2, [\"children\", \"as\", \"tag\", \"triggerOnce\", \"threshold\", \"root\", \"rootMargin\", \"onChange\", \"skip\", \"trackVisibility\", \"delay\", \"initialInView\"]);\n\n    return /*#__PURE__*/createElement(as || tag || 'div', _extends({\n      ref: this.handleNode\n    }, props), children);\n  };\n\n  return InView;\n}(Component);\n\nInView.displayName = 'InView';\nInView.defaultProps = {\n  threshold: 0,\n  triggerOnce: false,\n  initialInView: false\n};\n/**\r\n * React Hooks make it easy to monitor the `inView` state of your components. Call\r\n * the `useInView` hook with the (optional) [options](#options) you need. It will\r\n * return an array containing a `ref`, the `inView` status and the current\r\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\r\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\r\n * report the status.\r\n *\r\n * @example\r\n * ```jsx\r\n * import React from 'react';\r\n * import { useInView } from 'react-intersection-observer';\r\n *\r\n * const Component = () => {\r\n *   const { ref, inView, entry } = useInView({\r\n *       threshold: 0,\r\n *   });\r\n *\r\n *   return (\r\n *     <div ref={ref}>\r\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\r\n *     </div>\r\n *   );\r\n * };\r\n * ```\r\n */\n\nfunction useInView(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      threshold = _ref.threshold,\n      delay = _ref.delay,\n      trackVisibility = _ref.trackVisibility,\n      rootMargin = _ref.rootMargin,\n      root = _ref.root,\n      triggerOnce = _ref.triggerOnce,\n      skip = _ref.skip,\n      initialInView = _ref.initialInView;\n\n  var unobserve = useRef();\n\n  var _React$useState = useState({\n    inView: !!initialInView\n  }),\n      state = _React$useState[0],\n      setState = _React$useState[1];\n\n  var setRef = useCallback(function (node) {\n    if (unobserve.current !== undefined) {\n      unobserve.current();\n      unobserve.current = undefined;\n    } // Skip creating the observer\n\n\n    if (skip) return;\n\n    if (node) {\n      unobserve.current = observe(node, function (inView, entry) {\n        setState({\n          inView: inView,\n          entry: entry\n        });\n\n        if (entry.isIntersecting && triggerOnce && unobserve.current) {\n          // If it should only trigger once, unobserve the element after it's inView\n          unobserve.current();\n          unobserve.current = undefined;\n        }\n      }, {\n        root: root,\n        rootMargin: rootMargin,\n        threshold: threshold,\n        // @ts-ignore\n        trackVisibility: trackVisibility,\n        // @ts-ignore\n        delay: delay\n      });\n    }\n  }, // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [// If the threshold is an array, convert it to a string so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, root, rootMargin, triggerOnce, skip, trackVisibility, delay]);\n  /* eslint-disable-next-line */\n\n  useEffect(function () {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView\n      });\n    }\n  });\n  var result = [setRef, state.inView, state.entry]; // Support object destructuring, by adding the specific values.\n\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\n\nexport default InView;\nexport { InView, observe, useInView };","map":{"version":3,"sources":["/Users/nickdellorco/Desktop/DiaDragons/node_modules/react-intersection-observer/react-intersection-observer.m.js"],"names":["createElement","Component","useRef","useState","useCallback","useEffect","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_inheritsLoose","subClass","superClass","create","constructor","__proto__","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","ObserverMap","Map","RootIds","WeakMap","rootId","getRootId","root","has","get","set","toString","optionsToId","options","sort","filter","undefined","map","createObserver","id","instance","elements","thresholds","observer","IntersectionObserver","entries","forEach","entry","_elements$get","inView","isIntersecting","some","threshold","intersectionRatio","trackVisibility","isVisible","callback","Array","isArray","observe","element","_createObserver","callbacks","push","unobserve","splice","size","disconnect","isPlainChildren","props","children","InView","_React$Component","_this","node","_unobserveCb","handleNode","triggerOnce","skip","setState","initialInView","observeNode","handleChange","onChange","state","_proto","componentDidUpdate","prevProps","rootMargin","delay","componentWillUnmount","_this$props","render","_this$state","ref","_this$props2","as","tag","displayName","defaultProps","useInView","_temp","_ref","_React$useState","setRef","current","result"],"mappings":"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","sourcesContent":["import { createElement, Component, useRef, useState, useCallback, useEffect } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar ObserverMap = new Map();\nvar RootIds = new WeakMap();\nvar rootId = 0;\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */\n\nfunction getRootId(root) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */\n\n\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(function (key) {\n    return options[key] !== undefined;\n  }).map(function (key) {\n    return key + \"_\" + (key === 'root' ? getRootId(options.root) : options[key]);\n  }).toString();\n}\n\nfunction createObserver(options) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  var id = optionsToId(options);\n  var instance = ObserverMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    var elements = new Map();\n    var thresholds;\n    var observer = new IntersectionObserver(function (entries) {\n      entries.forEach(function (entry) {\n        var _elements$get;\n\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        var inView = entry.isIntersecting && thresholds.some(function (threshold) {\n          return entry.intersectionRatio >= threshold;\n        }); // @ts-ignore support IntersectionObserver v2\n\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(function (callback) {\n          callback(inView, entry);\n        });\n      });\n    }, options); // Ensure we have a valid thresholds array. If not, use the threshold from the options\n\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id: id,\n      observer: observer,\n      elements: elements\n    };\n    ObserverMap.set(id, instance);\n  }\n\n  return instance;\n}\n/**\r\n * @param element - DOM Element to observe\r\n * @param callback - Callback function to trigger when intersection status changes\r\n * @param options - Intersection Observer options\r\n * @return Function - Cleanup function that should be triggered to unregister the observer\r\n */\n\n\nfunction observe(element, callback, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (!element) return function () {}; // An observer with the same options can be reused, so lets use this fact\n\n  var _createObserver = createObserver(options),\n      id = _createObserver.id,\n      observer = _createObserver.observer,\n      elements = _createObserver.elements; // Register the callback listener for this element\n\n\n  var callbacks = elements.get(element) || [];\n\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements[\"delete\"](element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      ObserverMap[\"delete\"](id);\n    }\n  };\n}\n\nfunction isPlainChildren(props) {\n  return typeof props.children !== 'function';\n}\n/**\r\n ## Render props\r\n\n To use the `<InView>` component, you pass it a function. It will be called\r\n whenever the state changes, with the new value of `inView`. In addition to the\r\n `inView` prop, children also receive a `ref` that should be set on the\r\n containing DOM element. This is the element that the IntersectionObserver will\r\n monitor.\r\n\n If you need it, you can also access the\r\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\r\n on `entry`, giving you access to all the details about the current intersection\r\n state.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView>\r\n {({ inView, ref, entry }) => (\r\n      <div ref={ref}>\r\n        <h2>{`Header inside viewport ${inView}.`}</h2>\r\n      </div>\r\n    )}\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n\n ## Plain children\r\n\n You can pass any element to the `<InView />`, and it will handle creating the\r\n wrapping DOM element. Add a handler to the `onChange` method, and control the\r\n state in your own component. Any extra props you add to `<InView>` will be\r\n passed to the HTML element, allowing you set the `className`, `style`, etc.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\r\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n */\n\n\nvar InView = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(InView, _React$Component);\n\n  function InView(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.node = null;\n    _this._unobserveCb = null;\n\n    _this.handleNode = function (node) {\n      if (_this.node) {\n        // Clear the old observer, before we start observing a new element\n        _this.unobserve();\n\n        if (!node && !_this.props.triggerOnce && !_this.props.skip) {\n          // Reset the state if we get a new node, and we aren't ignoring updates\n          _this.setState({\n            inView: !!_this.props.initialInView,\n            entry: undefined\n          });\n        }\n      }\n\n      _this.node = node ? node : null;\n\n      _this.observeNode();\n    };\n\n    _this.handleChange = function (inView, entry) {\n      if (inView && _this.props.triggerOnce) {\n        // If `triggerOnce` is true, we should stop observing the element.\n        _this.unobserve();\n      }\n\n      if (!isPlainChildren(_this.props)) {\n        // Store the current State, so we can pass it to the children in the next render update\n        // There's no reason to update the state for plain children, since it's not used in the rendering.\n        _this.setState({\n          inView: inView,\n          entry: entry\n        });\n      }\n\n      if (_this.props.onChange) {\n        // If the user is actively listening for onChange, always trigger it\n        _this.props.onChange(inView, entry);\n      }\n    };\n\n    _this.state = {\n      inView: !!props.initialInView,\n      entry: undefined\n    };\n    return _this;\n  }\n\n  var _proto = InView.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n      this.unobserve();\n      this.observeNode();\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  };\n\n  _proto.observeNode = function observeNode() {\n    if (!this.node || this.props.skip) return;\n    var _this$props = this.props,\n        threshold = _this$props.threshold,\n        root = _this$props.root,\n        rootMargin = _this$props.rootMargin,\n        trackVisibility = _this$props.trackVisibility,\n        delay = _this$props.delay;\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold: threshold,\n      root: root,\n      rootMargin: rootMargin,\n      // @ts-ignore\n      trackVisibility: trackVisibility,\n      // @ts-ignore\n      delay: delay\n    });\n  };\n\n  _proto.unobserve = function unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n\n      this._unobserveCb = null;\n    }\n  };\n\n  _proto.render = function render() {\n    if (!isPlainChildren(this.props)) {\n      var _this$state = this.state,\n          inView = _this$state.inView,\n          entry = _this$state.entry;\n      return this.props.children({\n        inView: inView,\n        entry: entry,\n        ref: this.handleNode\n      });\n    }\n\n    var _this$props2 = this.props,\n        children = _this$props2.children,\n        as = _this$props2.as,\n        tag = _this$props2.tag,\n        props = _objectWithoutPropertiesLoose(_this$props2, [\"children\", \"as\", \"tag\", \"triggerOnce\", \"threshold\", \"root\", \"rootMargin\", \"onChange\", \"skip\", \"trackVisibility\", \"delay\", \"initialInView\"]);\n\n    return /*#__PURE__*/createElement(as || tag || 'div', _extends({\n      ref: this.handleNode\n    }, props), children);\n  };\n\n  return InView;\n}(Component);\nInView.displayName = 'InView';\nInView.defaultProps = {\n  threshold: 0,\n  triggerOnce: false,\n  initialInView: false\n};\n\n/**\r\n * React Hooks make it easy to monitor the `inView` state of your components. Call\r\n * the `useInView` hook with the (optional) [options](#options) you need. It will\r\n * return an array containing a `ref`, the `inView` status and the current\r\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\r\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\r\n * report the status.\r\n *\r\n * @example\r\n * ```jsx\r\n * import React from 'react';\r\n * import { useInView } from 'react-intersection-observer';\r\n *\r\n * const Component = () => {\r\n *   const { ref, inView, entry } = useInView({\r\n *       threshold: 0,\r\n *   });\r\n *\r\n *   return (\r\n *     <div ref={ref}>\r\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\r\n *     </div>\r\n *   );\r\n * };\r\n * ```\r\n */\n\nfunction useInView(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      threshold = _ref.threshold,\n      delay = _ref.delay,\n      trackVisibility = _ref.trackVisibility,\n      rootMargin = _ref.rootMargin,\n      root = _ref.root,\n      triggerOnce = _ref.triggerOnce,\n      skip = _ref.skip,\n      initialInView = _ref.initialInView;\n\n  var unobserve = useRef();\n\n  var _React$useState = useState({\n    inView: !!initialInView\n  }),\n      state = _React$useState[0],\n      setState = _React$useState[1];\n\n  var setRef = useCallback(function (node) {\n    if (unobserve.current !== undefined) {\n      unobserve.current();\n      unobserve.current = undefined;\n    } // Skip creating the observer\n\n\n    if (skip) return;\n\n    if (node) {\n      unobserve.current = observe(node, function (inView, entry) {\n        setState({\n          inView: inView,\n          entry: entry\n        });\n\n        if (entry.isIntersecting && triggerOnce && unobserve.current) {\n          // If it should only trigger once, unobserve the element after it's inView\n          unobserve.current();\n          unobserve.current = undefined;\n        }\n      }, {\n        root: root,\n        rootMargin: rootMargin,\n        threshold: threshold,\n        // @ts-ignore\n        trackVisibility: trackVisibility,\n        // @ts-ignore\n        delay: delay\n      });\n    }\n  }, // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [// If the threshold is an array, convert it to a string so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, root, rootMargin, triggerOnce, skip, trackVisibility, delay]);\n  /* eslint-disable-next-line */\n\n  useEffect(function () {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView\n      });\n    }\n  });\n  var result = [setRef, state.inView, state.entry]; // Support object destructuring, by adding the specific values.\n\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\n\nexport default InView;\nexport { InView, observe, useInView };\n//# sourceMappingURL=react-intersection-observer.m.js.map\n"]},"metadata":{},"sourceType":"module"}